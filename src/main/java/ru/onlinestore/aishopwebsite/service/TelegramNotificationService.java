package ru.onlinestore.aishopwebsite.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import ru.onlinestore.aishopwebsite.model.CartItem;
import ru.onlinestore.aishopwebsite.model.Order;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;


@Service
public class TelegramNotificationService {

    @Value("${telegram.bot.token}")
    private String botToken;

    @Value("${telegram.chat.id}")
    private String chatId;

    private final RestTemplate restTemplate = new RestTemplate();

    public void sendOrderNotification(Order order, List<CartItem> cart, double total) {
        StringBuilder message = new StringBuilder();
        message.append("<b>üì¶ –ù–û–í–´–ô –ó–ê–ö–ê–ó</b>\n\n");
        message.append("<b>üë§ –ò–º—è:</b> ").append(order.getName()).append("\n");
        message.append("<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>").append(order.getPhone()).append("</code>\n\n");
        message.append("<b>üõí –¢–æ–≤–∞—Ä—ã:</b>\n");
        for (CartItem item : cart) {
            message.append("‚Ä¢ ").append(item.getProduct().getName())
                    .append(" ‚Äî ").append(item.getQuantity()).append(" —à—Ç. ")
                    .append(String.format("%.2f", item.getTotalPrice())).append(" ‚ÇΩ\n");
        }
        message.append("\n");
        message.append("<b>üí∞ –ò—Ç–æ–≥–æ:</b> ").append(String.format("%.2f", total)).append(" ‚ÇΩ");

        sendMessage(message.toString());
    }


    private String escapeMarkdown(String text) {
        return text.replaceAll("[_\\-*]", "\\\\$0"); // —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º _, *, -
    }

    private String formatPrice(double price) {
        return String.format("%.2f", price).replace(",", ".");
    }

    private void sendMessage(String message) {
        try {
            String url = String.format(
                    "https://api.telegram.org/bot%s/sendMessage?chat_id=%s&text=%s&parse_mode=HTML",
                    botToken,
                    chatId,
                    message
            );

            restTemplate.getForObject(url, String.class);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –∑–∞–∫–∞–∑–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ—É—Ç–±–æ–ª–∫–∏
     */
    public void sendCustomTshirtOrder(
            String customerName,
            String phone,
            String shirtColor,
            String printImageUrl) {

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞
        String readableColor = "–ë–µ–ª–∞—è";
        if ("black".equalsIgnoreCase(shirtColor)) {
            readableColor = "–ß—ë—Ä–Ω–∞—è";
        }


        // –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        String message = buildCustomOrderMessage(customerName, phone, readableColor, printImageUrl);
        sendMessage(message);
    }
    private String buildCustomOrderMessage(
            String customerName,
            String phone,
            String readableColor,
            String printImageUrl) {

        StringBuilder message = new StringBuilder();
        message.append("<b>üëï –ö–ê–°–¢–û–ú–ù–ê–Ø –§–£–¢–ë–û–õ–ö–ê</b>\n\n");
        message.append("<b>üë§ –ò–º—è:</b> ").append(escapeHtml(customerName)).append("\n");
        message.append("<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>").append(escapeHtml(phone)).append("</code>\n\n");

        message.append("<b>üé® –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n");
        message.append("‚Ä¢ <b>–¶–≤–µ—Ç —Ñ—É—Ç–±–æ–ª–∫–∏:</b> ").append(readableColor).append("\n");
        message.append("‚Ä¢ <b>–¢–∏–ø:</b> –° –ò–ò-–ø—Ä–∏–Ω—Ç–æ–º\n");

        if (printImageUrl != null && !printImageUrl.isEmpty()) {
            message.append("‚Ä¢ <b>–ü—Ä–∏–Ω—Ç:</b> üñºÔ∏è \n").append(printImageUrl);
        }

        message.append("\n");
        message.append("<b>‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è");

        return message.toString();
    }

    // –ü—Ä–æ—Å—Ç–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è HTML
    private String escapeHtml(String text) {
        return text
                .replace("&", "&amp;")
                .replace("<", "<")
                .replace(">", ">")
                .replace("\"", "&quot;");
    }
}